require 'singleton'
require 'logger'

require 'openwfe/util/scheduler'
include OpenWFE

class DTScheduler
  attr_accessor :scheduler, :interval, :job_ids, :started_at, :stopped_at, :is_running

  include Singleton
  def initialize
    @interval = '30m'
    @is_running = false
    @job_ids = []
    logfile = File.expand_path(File.dirname(__FILE__) + "/../log/scheduler.log")
    begin
      @logger = Logger.new(logfile)
      @logger.level = Logger::INFO
    rescue StandardError
      @logger = Logger.new(STDERR)
      @logger.level = Logger::WARN
      @logger.warn(
        "Rails Error: Unable to access log file. Please ensure that #{logfile} exists and is chmod 0666. " +
        "The log level has been raised to WARN and the output directed to STDERR until the problem is fixed."
      )
    end
  end

  def start
    @scheduler = Scheduler.new
    @scheduler.start
    @started_at = Time.now
    @is_running = true
    @logger.info "[#{Time.now.to_s}] Starting DTScheduler"
    # gift emailer
    require 'gift_mailer'
    @job_ids << @scheduler.schedule_every('30m') { 
      @logger.info "[#{Time.now.to_s}] Checking for scheduled Gifts to Email"
      num_sent = GiftMailer.run
      @logger.info "[#{Time.now.to_s}] Scheduled Gift Emails Sent: #{num_sent}"
    }
    @logger.debug "[#{Time.now.to_s}] Gift Email scheduler starting up. Interval: #{@interval}. Job ID: #{@job_id}"
    @scheduler.join
  end

  def stop
    @logger.info "[#{Time.now.to_s}] Stopping DTScheduler"
    @scheduler.stop
    @is_running = false
    @stopped_at = Time.now
  end
end
schedule = DTScheduler.instance
schedule.start
